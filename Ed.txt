1. Conceptos básicos

1.1. Tipos de sofware.
Software: la parte lógica de un ordenador (no puede tocar).
Hardware: la parte tangible (Puedo tocar).

- De sistema: es el soporte que controla e interactúa con el hardware y administra los recursos.
(Sistema op) , drivers / , controladores.

- De app: Sirve para hacer tareas complejas a alto nivel (Suite informática, Navegador, Edición de imagen).

- De desarrollo: para desarrollar otro software. (Editores, Compiladores, Interpretes.)

Los drives son los controladores de dispositivos.
(compilador: genera un archivo con instrucciones )

1.2. Relación hardware-Software .
- CPU: unidad centra de proceso. Toma datas , ejecuta instrucciones y devuelve datos. (Procesador o microprocesador).

- Memoria RAM: guarda temporalmente archivos ejecutables. (memoria principal) Al apagar el ordenador pierde la info.

- Disco duro: guarda Permanente archivos ejecutables. (Memoria secundaria). (Almacenamiento masivo).

- E / S: recoge datos nuevos, se lee y se guardan en el disco.

El disco duro se considera un periférico de E / S.

1.3. Códigos fuente, objeto y ejecutable.

- Código fuente: es un archivo de texto escrito en un lenguaje de programación que se puede seguir editando. como Java o C + + .

- Código objeto: (  paso intermedio) archivo no ejecutable.

- Código ejecutable: archivo ejecutable. Es binario porque lo puede leer la máquina.

En los lenguajes interpretados no existe ni código objeto, ni código binario. Solo existe el código fuente porque se ejecuta del "TIRÓN "

Código objeto en Java= Bytecode.

2. Ciclo de vida del Software.

2.1. Ingeniería del Software.

2.2 Desarrollo de software

Análisis: establecer los requisitos del programa. es decirlo que tiene que hace el programa. Especificar y darle forma a la idea del programa

requisito funcional: un requisito del cliente que tenga una función en el código como darle a un botón que active algo.

requisito no funcional: algo del diseño estético Por ejemplo el fondo de la página.

Diseño: se diseña la idea de la Página

Codificación: escribir el código fuente.

pruebas: el objetivo es que el programa falle para corregirlos.

Mantenimiento:

        Perfectivo: no añade cosas.

Resultado tras cada fase.

-

3. Modelos de desarrollo

Modelos de desarrollo de Software

Modelos clásicos
Modelo en Cascada: se hace paso a paso
Modelo en V: se puedes saltar Pasos. ES más dinámico

Modelo de construcción de prototipos:
Diseñar sin ninguna funcionalidad con algún programa de diseño.
Modelos evolutivos o incrementales:
Modelo en espiral:
Metodologías ágiles: Permiten reaccionar mejor y más rápido ante cambios en los requisitos.